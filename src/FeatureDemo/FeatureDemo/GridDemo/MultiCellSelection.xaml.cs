using DevExpress.Data;
using DevExpress.WinUI.Grid;
using Microsoft.UI.Xaml;
using System;

namespace GridDemo {
    public sealed partial class MultiCellSelection : GridDemoUserControl {
        public SalesByYearData Data { get; } = new SalesByYearData();
        public MultiCellSelection() {
            this.InitializeComponent();
            gridControl.AutoGeneratedColumns += gridControl_ColumnsPopulated;
            gridControl.CustomSummary += gridControl_CustomSummary;
            gridControl.SelectionChanged += gridControl_SelectionChanged;
            Unloaded += OnUnloaded;
        }
        void OnUnloaded(object sender, RoutedEventArgs e) {
            gridControl.AutoGeneratedColumns -= gridControl_ColumnsPopulated;
            gridControl.CustomSummary -= gridControl_CustomSummary;
            gridControl.SelectionChanged -= gridControl_SelectionChanged;
            gridControl.DataContext = null;
        }

        void SelectCells() {
            gridControl.BeginSelection();
            int[,] selectedCells = new int[,] {
                {0, 1}, {1, 1}, {2, 1}, {3, 1}, {4, 1}, {5, 1}, {6, 1}, {7, 1}, {8, 1}, {9, 1},
                {0, 2}, {1, 2}, {2, 2}, {7, 2}, {8, 2}, {9, 2}, 
                {2, 3}, {3, 3}, {4, 3}, {5, 3}, {6, 3}, {7, 3},  

                {12, 1}, {13, 1}, {14, 1}, {15, 1}, {18, 1}, {19, 1}, {20, 1},  {21, 1},  
                {14, 2}, {15, 2}, {16, 2}, {17, 2}, {18, 2}, {19, 2}, 
                {12, 3}, {13, 3}, {14, 3}, {15, 3}, {18, 3}, {19, 3}, {20, 3},  {21, 3},  
            };
            for(int i = 0; i < selectedCells.GetLength(0); i++)
                gridControl.SelectCell(selectedCells[i, 0], gridControl.Columns[selectedCells[i, 1]]);
            gridControl.EndSelection();
        }
        void gridControl_AutoGeneratingColumn(object sender, AutoGeneratingColumnEventArgs e) {
            GridTextColumn textColumn = e.Column as GridTextColumn;
            if(textColumn != null)
                textColumn.DisplayFormat = "$#0,0";
        }
        void gridControl_ColumnsPopulated(object sender, EventArgs e) {
            gridControl.BeginDataUpdate();
            foreach(var column in gridControl.Columns)
                gridControl.TotalSummary.Add(new GridSummaryItem() { FieldName = column.FieldName, SummaryType = SummaryItemType.Custom, DisplayFormat = "${0:N}" });
            gridControl.EndDataUpdate();
            SelectCells();
        }
        int sum = 0;
        void gridControl_CustomSummary(object sender, CustomSummaryEventArgs e) {
            if(object.Equals(e.SummaryProcess, CustomSummaryProcess.Start)) {
                sum = 0;
            }
            if(e.SummaryProcess == CustomSummaryProcess.Calculate) {
                if(gridControl.IsCellSelected(e.RowHandle, gridControl.Columns[((GridSummaryItem)e.Item).FieldName])) {
                    sum += (int)e.FieldValue;
                }
            }
            if(e.SummaryProcess == CustomSummaryProcess.Finalize)
                e.TotalValue = sum;
        }
        void gridControl_SelectionChanged(object sender, GridSelectionChangedEventArgs e) {
            gridControl.UpdateTotalSummary();
        }
        protected internal override GridControl Grid { get { return gridControl; } }
        protected override bool NeedChangeAutoWidth { get { return false; } }
        void RbCellExtendedMode_Checked(object sender, RoutedEventArgs e) {
            gridControl.SelectionMode = MultiSelectMode.CellExtended;
        }
        void RbCellMode_Checked(object sender, RoutedEventArgs e) {
            gridControl.SelectionMode = MultiSelectMode.Cell;
        }
    }
}
